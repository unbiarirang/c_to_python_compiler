/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var my_c_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[1,16,17,18,19,20,21,22,23,24,25],$Vb=[1,17],$Vc=[9,12,27,35,43],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[10,12,13,27,30,35,38],$Vh=[1,46],$Vi=[1,49],$Vj=[1,40],$Vk=[1,39],$Vl=[1,41],$Vm=[1,42],$Vn=[1,37],$Vo=[1,38],$Vp=[1,43],$Vq=[1,44],$Vr=[1,47],$Vs=[1,48],$Vt=[1,61],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[12,27],$VC=[1,78],$VD=[1,80],$VE=[1,81],$VF=[12,14,27,31,35,63,64],$VG=[1,82],$VH=[1,83],$VI=[1,84],$VJ=[12,14,27,31,35,63,64,66,67,68],$VK=[1,85],$VL=[1,86],$VM=[12,14,27,31,35,63,64,66,67,68,70,71],$VN=[1,87],$VO=[1,88],$VP=[1,89],$VQ=[1,90],$VR=[12,14,27,31,35,63,64,66,67,68,70,71,73,74,75,76],$VS=[1,91],$VT=[1,92],$VU=[12,14,27,31,35,63,64,66,67,68,70,71,73,74,75,76,78,79],$VV=[1,93],$VW=[1,94],$VX=[12,14,27,31,35,63,64,66,67,68,70,71,73,74,75,76,78,79,81,82],$VY=[1,95],$VZ=[1,96],$V_=[1,97],$V$=[12,14,27,31,35,43,63,64,66,67,68,70,71,73,74,75,76,78,79,81,82,83,84],$V01=[2,90],$V11=[12,14,27,31,35,38,43,52,53,54,55,56,57,58,59,60,61,63,64,66,67,68,70,71,73,74,75,76,78,79,81,82,83,84],$V21=[10,12,13,14,27,31,35,38,43,52,53,54,55,56,57,58,59,60,61,63,64,66,67,68,70,71,73,74,75,76,78,79,81,82,83,84,86,87,92,93],$V31=[1,9,10,16,17,18,19,20,21,22,23,24,25,30,31,35,43,67,81,82,86,87,88,89,94,95,96,97,98,99,100,101,102,103],$V41=[9,10,30,31,35,43,67,81,82,86,87,88,89,94,95,96,98,99,100,101,102,103],$V51=[9,10,16,17,18,19,20,21,22,23,24,25,30,31,35,43,67,81,82,86,87,88,89,94,95,96,98,99,100,101,102,103],$V61=[9,10,30,31,35,43,67,81,82,86,87,88,89,94,95,96,97,98,99,100,101,102,103],$V71=[9,10,12,30,31,35,43,67,81,82,86,87,88,89,94,95,96,97,98,99,100,101,102,103],$V81=[1,122],$V91=[12,14,27,35],$Va1=[12,14,27,31,35],$Vb1=[12,27,35,38],$Vc1=[9,10,43,67,81,82,86,87,88,89,94,95],$Vd1=[1,186],$Ve1=[27,31,35],$Vf1=[27,31];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"function_definitions":4,"function_definition":5,"type_specifier":6,"direct_declarator":7,"compound_statement":8,"IDENTIFIER":9,"(":10,"parameter_list":11,")":12,"[":13,"]":14,"logical_expression":15,"VOID":16,"CHAR":17,"SHORT":18,"INT":19,"LONG":20,"FLOAT":21,"DOUBLE":22,"SIGNED":23,"UNSIGNED":24,"TYPE_NAME":25,"parameter_declaration":26,",":27,"declaration_specifiers":28,"declarator":29,"{":30,"}":31,"statement_list":32,"declaration_list":33,"declaration":34,";":35,"init_declarator":36,"init_declarator_list":37,"=":38,"initializer":39,"assignment_expression":40,"initializer_list":41,"pointer":42,"*":43,"statement":44,"expression_statement":45,"selection_statement":46,"iteration_statement":47,"jump_statement":48,"expression":49,"unary_expression":50,"assignment_operator":51,"MUL_ASSIGN":52,"DIV_ASSIGN":53,"MOD_ASSIGN":54,"ADD_ASSIGN":55,"SUB_ASSIGN":56,"LEFT_ASSIGN":57,"RIGHT_ASSIGN":58,"AND_ASSIGN":59,"XOR_ASSIGN":60,"OR_ASSIGN":61,"bit_operation_expression":62,"AND_OP":63,"OR_OP":64,"equality_expression":65,"|":66,"&":67,"^":68,"relational_expression":69,"EQ_OP":70,"NE_OP":71,"shift_expression":72,"<":73,">":74,"LE_OP":75,"GE_OP":76,"additive_expression":77,"LEFT_OP":78,"RIGHT_OP":79,"multiplicative_expression":80,"+":81,"-":82,"/":83,"%":84,"postfix_expression":85,"INC_OP":86,"DEC_OP":87,"~":88,"!":89,"primary_expression":90,"argument_expression_list":91,".":92,"PTR_OP":93,"CONSTANT":94,"STRING_LITERAL":95,"IF":96,"ELSE":97,"WHILE":98,"DO":99,"FOR":100,"CONTINUE":101,"BREAK":102,"RETURN":103,"$accept":0,"$end":1},
terminals_: {2:"error",9:"IDENTIFIER",10:"(",12:")",13:"[",14:"]",16:"VOID",17:"CHAR",18:"SHORT",19:"INT",20:"LONG",21:"FLOAT",22:"DOUBLE",23:"SIGNED",24:"UNSIGNED",25:"TYPE_NAME",27:",",30:"{",31:"}",35:";",38:"=",43:"*",52:"MUL_ASSIGN",53:"DIV_ASSIGN",54:"MOD_ASSIGN",55:"ADD_ASSIGN",56:"SUB_ASSIGN",57:"LEFT_ASSIGN",58:"RIGHT_ASSIGN",59:"AND_ASSIGN",60:"XOR_ASSIGN",61:"OR_ASSIGN",63:"AND_OP",64:"OR_OP",66:"|",67:"&",68:"^",70:"EQ_OP",71:"NE_OP",73:"<",74:">",75:"LE_OP",76:"GE_OP",78:"LEFT_OP",79:"RIGHT_OP",81:"+",82:"-",83:"/",84:"%",86:"INC_OP",87:"DEC_OP",88:"~",89:"!",92:".",93:"PTR_OP",94:"CONSTANT",95:"STRING_LITERAL",96:"IF",97:"ELSE",98:"WHILE",99:"DO",100:"FOR",101:"CONTINUE",102:"BREAK",103:"RETURN"},
productions_: [0,[3,1],[4,1],[4,2],[5,3],[7,1],[7,4],[7,3],[7,3],[7,4],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,1],[11,3],[26,2],[26,1],[8,2],[8,3],[8,3],[8,4],[33,1],[33,2],[34,2],[34,3],[28,1],[37,1],[37,3],[36,1],[36,3],[39,1],[39,3],[41,1],[41,3],[29,2],[29,1],[42,1],[42,2],[32,1],[32,2],[44,1],[44,1],[44,1],[44,1],[44,1],[45,1],[45,2],[49,1],[49,3],[40,1],[40,3],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[15,1],[15,3],[15,3],[62,1],[62,3],[62,3],[62,3],[65,1],[65,3],[65,3],[69,1],[69,3],[69,3],[69,3],[69,3],[72,1],[72,3],[72,3],[77,1],[77,3],[77,3],[80,1],[80,3],[80,3],[80,3],[50,1],[50,2],[50,2],[50,2],[50,2],[50,2],[50,2],[50,2],[50,2],[85,1],[85,4],[85,3],[85,4],[85,3],[85,3],[85,2],[85,2],[91,1],[91,3],[90,1],[90,1],[90,1],[90,3],[46,5],[46,7],[47,5],[47,7],[47,6],[47,7],[48,2],[48,2],[48,2],[48,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {type: "program", funcDefs: $$[$0]}
break;
case 2: case 20: case 28: case 39: case 45: case 111:
 this.$ = [$$[$0]]; 
break;
case 3: case 29: case 46:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4:
 this.$ = {type: "function definition", returnType: $$[$0-2].vartype, funcName: $$[$0-1].name, params: $$[$0-1].params, statements: $$[$0]} /*{type: "FuncDefExpression", dest: {vartype: $$[$0-2].vartype, name: $$[$0-1].name, type: "Identifier"}, params: $$[$0-1].params, body: $$[$0]};*/
break;
case 5:
 this.$ = {name: yytext, isArray: false}; 
break;
case 6:
 this.$ = {name: $$[$0-3].name, params: $$[$0-1]}; 
break;
case 7:
 this.$ = {name: $$[$0-2].name, params: []}; 
break;
case 8:
 this.$ = {name: $$[$0-2].name, isArray: true}; 
break;
case 9:
 this.$ = {name: $$[$0-3].name, isArray: true}; 
break;
case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19:
 this.$ = {vartype: yytext};
break;
case 21: case 112:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 22:
 this.$ = {type: "parameter declaration", declaredType: $$[$0-1].vartype, name: $$[$0].name, isArray: $$[$0].isArray, isPointer: $$[$0].isPointer}; 
break;
case 23:
 this.$ = {type: "parameter declaration", declaredType: $$[$0].vartype, name: null, isArray: false, isPointer: false}; 
break;
case 24:
 this.$ = {type: "compound statement", declarations: [], statements: []}; 
break;
case 25:
 this.$ = {type: "compound statement", declarations: [], statements: $$[$0-1]}; 
break;
case 26:
 this.$ = {type: "compound statement", declarations: $$[$0-1], statements: []}; 
break;
case 27:
 this.$ = {type: "compound statement", declarations: $$[$0-2], statements: $$[$0-1]}; 
break;
case 30:
 this.$ = {type: "declaration", declaredType: $$[$0-1].vartype, name: $$[$0].name, isArray: null, isPointer: null, assignExpr: null};
break;
case 31:
 this.$ = {type: "declaration", declaredType: $$[$0-2].vartype, name: $$[$0-1].name, isArray: $$[$0-1].isArray, isPointer: $$[$0-1].isPointer, assignExpr: $$[$0-1].assignExpr};
break;
case 32: case 37:
 this.$ = $$[$0]; 
break;
case 35:
 this.$ ={type: "init_declarator", name: $$[$0].name, assignExpr: null};
break;
case 36:
 this.$ ={type: "init_declarator", name: $$[$0-2].name, assignExpr: $$[$0]};
break;
case 40:
 $$[$0-2].push($$[$0]); this.$ =$$[$0-2]; 
break;
case 41:
 this.$ = {type: "declarator", name: $$[$0].name, isPointer: true, isArray: $$[$0].isArray}; 
break;
case 42:
 this.$ = {type: "declarator", name: $$[$0].name, isPointer: false, isArray: $$[$0].isArray}; 
break;
case 47:
 this.$ = {type: "statement", statementType: "compound", subStatement: $$[$0]}; 
break;
case 48:
 this.$ = {type: "statement", statementType: "expression", subStatement: $$[$0]}; 
break;
case 49:
 this.$ = {type: "statement", statementType: "selection", subStatement: $$[$0]}; 
break;
case 50:
 this.$ = {type: "statement", statementType: "iteration", subStatement: $$[$0]}; 
break;
case 51:
 this.$ = {type: "statement", statementType: "jump", subStatement: $$[$0]}; 
break;
case 52:
 this.$ = {type: "expression statement", expr: null};
break;
case 53:
 this.$ = {type: "expression statement", expr: $$[$0-1]}; 
break;
case 54:
 this.$ = {type: "expression", assignExprs: [$$[$0]]}; 
break;
case 55:
 $$[$0-2].assignExprs.push($$[$0]); this.$ = $$[$0-2]; 
break;
case 56:
 this.$ = {type: "assignment expression", logicalExpr: $$[$0], unaryExpr: null, assignOp: null, assginExpr: null}; 
break;
case 57:
 this.$ = {type: "assignment expression", logicalExpr: null, unaryExpr: $$[$0-2], assignOp: $$[$0-1], assginExpr: $$[$0]}; 
break;
case 58: case 63:
 this.$ = "="; 
break;
case 59:
 this.$ = "*="; 
break;
case 60:
 this.$ = "/="; 
break;
case 61:
 this.$ = "%="; 
break;
case 62:
 this.$ = "+="; 
break;
case 64:
 this.$ = "<<="; 
break;
case 65:
 this.$ = ">>="; 
break;
case 66:
 this.$ = "&="; 
break;
case 67:
 this.$ = "^="; 
break;
case 68:
 this.$ = "|="; 
break;
case 69:
 this.$ = {type: "logical expression", bitOpExpr: $$[$0], op: null, logicalExpr: null}; 
break;
case 70:
 this.$ = {type: "logical expression", bitOpExpr: $$[$0], op: "&&", logicalExpr: $$[$0-2]}; 
break;
case 71:
 this.$ = {type: "logical expression", bitOpExpr: $$[$0], op: "||", logicalExpr: $$[$0-2]}; 
break;
case 72:
 this.$ = {type: "bit operation expression", bitOpExpr: null, op: null, equalityExpr: $$[$0]}; 
break;
case 73:
 this.$ = {type: "bit operation expression", bitOpExpr: $$[$0-2], op: "|", equalityExpr: $$[$0]}; 
break;
case 74:
 this.$ = {type: "bit operation expression", bitOpExpr: $$[$0-2], op: "&", equalityExpr: $$[$0]}; 
break;
case 75:
 this.$ = {type: "bit operation expression", bitOpExpr: $$[$0-2], op: "^", equalityExpr: $$[$0]}; 
break;
case 76:
 this.$ = {type: "equality expression", equalityExpr: null, op: null, relationalExpr: $$[$0]}; 
break;
case 77:
 this.$ = {type: "equality expression", equalityExpr: $$[$0-2], op: "==", relationalExpr: $$[$0]}; 
break;
case 78:
 this.$ = {type: "equality expression", equalityExpr: $$[$0-2], op: "!=", relationalExpr: $$[$0]}; 
break;
case 79:
 this.$ = {type: "relational expression", relationalExpr: null, op: null, shiftExpr: $$[$0]}; 
break;
case 80:
 this.$ = {type: "relational expression", relationalExpr: $$[$0-2], op: "<", shiftExpr: $$[$0]}; 
break;
case 81:
 this.$ = {type: "relational expression", relationalExpr: $$[$0-2], op: ">", shiftExpr: $$[$0]}; 
break;
case 82:
 this.$ = {type: "relational expression", relationalExpr: $$[$0-2], op: "<=", shiftExpr: $$[$0]}; 
break;
case 83:
 this.$ = {type: "relational expression", relationalExpr: $$[$0-2], op: ">=", shiftExpr: $$[$0]}; 
break;
case 84:
 this.$ = {type: "shift expression", shiftExpr: null, op: null, additiveExpr: $$[$0]}; 
break;
case 85:
 this.$ = {type: "shift expression", shiftExpr: $$[$0-2], op: "<<", additiveExpr: $$[$0]}; 
break;
case 86:
 this.$ = {type: "shift expression", shiftExpr: $$[$0-2], op: ">>", additiveExpr: $$[$0]}; 
break;
case 87:
 this.$ = {type: "additive expression", additiveExpr: null, op: null, multiplicativeExpr: $$[$0]}; 
break;
case 88:
 this.$ = {type: "additive expression", additiveExpr: $$[$0-2], op: "+", multiplicativeExpr: $$[$0]}; 
break;
case 89:
 this.$ = {type: "additive expression", additiveExpr: $$[$0-2], op: "-", multiplicativeExpr: $$[$0]}; 
break;
case 90:
 this.$ = {type: "multiplicative expression", multiplicativeExpr: null, op: null, unaryExpr: $$[$0]}; 
break;
case 91:
 this.$ = {type: "multiplicative expression", multiplicativeExpr: $$[$0-2], op: "*", unaryExpr: $$[$0]}; 
break;
case 92:
 this.$ = {type: "multiplicative expression", multiplicativeExpr: $$[$0-2], op: "/", unaryExpr: $$[$0]}; 
break;
case 93:
 this.$ = {type: "multiplicative expression", multiplicativeExpr: $$[$0-2], op: "%", unaryExpr: $$[$0]}; 
break;
case 94:
 this.$ = {type: "unary expression", postfixExpr: $$[$0], op: "null",unaryExpr: null}; 
break;
case 95:
 this.$ = {type: "unary expression", postfixExpr: null, op: "++", unaryExpr: $$[$0]}; 
break;
case 96:
 this.$ = {type: "unary expression", postfixExpr: null, op: "--", unaryExpr: $$[$0]}; 
break;
case 97:
 this.$ = {type: "unary expression", postfixExpr: null, op: "&", unaryExpr: $$[$0]}; 
break;
case 98:
 this.$ = {type: "unary expression", postfixExpr: null, op: "*", unaryExpr: $$[$0]}; 
break;
case 99:
 this.$ = {type: "unary expression", postfixExpr: null, op: "+", unaryExpr: $$[$0]}; 
break;
case 100:
 this.$ = {type: "unary expression", postfixExpr: null, op: "-", unaryExpr: $$[$0]}; 
break;
case 101:
 this.$ = {type: "unary expression", postfixExpr: null, op: "~", unaryExpr: $$[$0]}; 
break;
case 102:
 this.$ = {type: "unary expression", postfixExpr: null, op: "!", unaryExpr: $$[$0]}; 
break;
case 103:
 this.$ = {type: "postfix expression", primaryExpr: $$[$0], postfixExpr: null, expr: null, identifier: null, op: null, arguments: null}; 
break;
case 104:
 this.$ = {type: "postfix expression", primaryExpr: null, postfixExpr: $$[$0-3], expr: $$[$0-1], identifier: null, op: null, arguments: null}; 
break;
case 105:
 this.$ = {type: "postfix expression", primaryExpr: null, postfixExpr: $$[$0-2], expr: null, identifier: null, op: null, arguments: null}; 
break;
case 106:
 this.$ = {type: "postfix expression", primaryExpr: null, postfixExpr: $$[$0-3], expr: null, identifier: null, op: null, arguments: $$[$0-1]}; 
break;
case 107: case 108:
 this.$ = {type: "postfix expression", primaryExpr: null, postfixExpr: $$[$0-2], expr: null, identifier: $$[$0], op: null, arguments: null}; 
break;
case 109:
 this.$ = {type: "postfix expression", primaryExpr: null, postfixExpr: $$[$0-1], expr: null, identifier: null, op: "++", arguments: null}; 
break;
case 110:
 this.$ = {type: "postfix expression", primaryExpr: null, postfixExpr: $$[$0-1], expr: null, identifier: null, op: "--", arguments: null}; 
break;
case 113: case 114: case 115:
 this.$ = {expr: null, value: yytext}; 
break;
case 116:
 this.$ = {expr: $$[$0-1], value: null}; 
break;
case 117:
 this.$ = {type: "selection statement", conditionExpr: $$[$0-2], ifThenStatement: $$[$0], elseStatement: null}; 
break;
case 118:
 this.$ = {type: "selection statement", conditionExpr: $$[$0-4], ifThenStatement: $$[$0-2], elseStatement: $$[$0]}; 
break;
case 119:
 this.$ = {type: "iteration statement", loopType: 'while', exprs: [$$[$0-2]], statement: $$[$0]}; 
break;
case 120:
 this.$ = {type: "iteration statement", loopType: 'doWhile', exprs: [$$[$0-2]], statement: $$[$0-5]}; 
break;
case 121:
 this.$ = {type: "iteration statement", loopType: 'for', exprs: [$$[$0-3].expr, $$[$0-2].expr], statement: $$[$0]}; 
break;
case 122:
 this.$ = {type: "iteration statement", loopType: 'for', exprs: [$$[$0-4].expr, $$[$0-3].expr, $$[$0-2]], statement: $$[$0-1]}; 
break;
case 123:
 this.$ = {type: "jump statement", jumpType: 'continue', expr: null}; 
break;
case 124:
 this.$ = {type: "jump statement", jumpType: 'break', expr: null}; 
break;
case 125:
 this.$ = {type: "jump statement", jumpType: 'return', expr: null}; 
break;
case 126:
 this.$ = {type: "jump statement", jumpType: 'return', expr: $$[$0-1]}; 
break;
}
},
table: [{3:1,4:2,5:3,6:4,16:$V0,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9},{1:[3]},{1:[2,1],5:15,6:4,16:$V0,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9},o($Va,[2,2]),{7:16,9:$Vb},o($Vc,[2,10]),o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),o($Vc,[2,16]),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19]),o($Va,[2,3]),{8:18,10:$Vd,13:$Ve,30:$Vf},o($Vg,[2,5]),o($Va,[2,4]),{6:26,11:22,12:[1,23],16:$V0,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:24,28:25},{9:$Vh,10:$Vi,14:[1,27],15:28,43:$Vj,50:35,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{6:26,8:55,9:$Vh,10:$Vi,15:71,16:$V0,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,28:60,30:$Vf,31:[1,50],32:51,33:52,34:54,35:$Vt,40:70,43:$Vj,44:53,45:56,46:57,47:58,48:59,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs,96:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA},{12:[1,73],27:[1,74]},o($Vg,[2,7]),o($VB,[2,20]),o($VB,[2,23],{29:75,42:76,7:77,9:$Vb,43:$VC}),o($Vc,[2,32]),o($Vg,[2,8]),{14:[1,79],63:$VD,64:$VE},o($VF,[2,69],{66:$VG,67:$VH,68:$VI}),o($VJ,[2,72],{70:$VK,71:$VL}),o($VM,[2,76],{73:$VN,74:$VO,75:$VP,76:$VQ}),o($VR,[2,79],{78:$VS,79:$VT}),o($VU,[2,84],{81:$VV,82:$VW}),o($VX,[2,87],{43:$VY,83:$VZ,84:$V_}),o($V$,$V01),o($V11,[2,94],{10:[1,99],13:[1,98],86:[1,102],87:[1,103],92:[1,100],93:[1,101]}),{9:$Vh,10:$Vi,43:$Vj,50:104,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:105,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:106,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:107,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:108,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:109,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:110,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:111,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},o($V21,[2,103]),o($V21,[2,113]),o($V21,[2,114]),o($V21,[2,115]),{9:$Vh,10:$Vi,15:71,40:70,43:$Vj,49:112,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},o($V31,[2,24]),{8:55,9:$Vh,10:$Vi,15:71,30:$Vf,31:[1,113],35:$Vt,40:70,43:$Vj,44:114,45:56,46:57,47:58,48:59,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs,96:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA},{6:26,8:55,9:$Vh,10:$Vi,15:71,16:$V0,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,28:60,30:$Vf,31:[1,115],32:116,34:117,35:$Vt,40:70,43:$Vj,44:53,45:56,46:57,47:58,48:59,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs,96:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA},o($V41,[2,45]),o($V51,[2,28]),o($V61,[2,47]),o($V61,[2,48]),o($V61,[2,49]),o($V61,[2,50]),o($V61,[2,51]),{7:77,9:$Vb,29:120,35:[1,118],36:119,42:76,43:$VC},o($V71,[2,52]),{27:$V81,35:[1,121]},{10:[1,123]},{10:[1,124]},{8:55,9:$Vh,10:$Vi,15:71,30:$Vf,35:$Vt,40:70,43:$Vj,44:125,45:56,46:57,47:58,48:59,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs,96:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA},{10:[1,126]},{35:[1,127]},{35:[1,128]},{9:$Vh,10:$Vi,15:71,35:[1,129],40:70,43:$Vj,49:130,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},o($V91,[2,54]),o($Va1,[2,56],{63:$VD,64:$VE}),o($V$,$V01,{51:131,38:[1,132],52:[1,133],53:[1,134],54:[1,135],55:[1,136],56:[1,137],57:[1,138],58:[1,139],59:[1,140],60:[1,141],61:[1,142]}),o($Vg,[2,6]),{6:26,16:$V0,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,23:$V7,24:$V8,25:$V9,26:143,28:25},o($VB,[2,22]),{7:144,9:$Vb},o($Vb1,[2,42],{10:$Vd,13:$Ve}),{9:[2,43],42:145,43:$VC},o($Vg,[2,9]),{9:$Vh,10:$Vi,43:$Vj,50:35,62:146,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,62:147,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,65:148,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,65:149,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,65:150,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,67:$Vk,69:151,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,67:$Vk,69:152,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,67:$Vk,72:153,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,67:$Vk,72:154,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,67:$Vk,72:155,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,67:$Vk,72:156,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,67:$Vk,77:157,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,67:$Vk,77:158,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,67:$Vk,80:159,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:35,67:$Vk,80:160,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:161,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:162,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,43:$Vj,50:163,67:$Vk,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,15:71,40:70,43:$Vj,49:164,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,12:[1,165],15:71,40:167,43:$Vj,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,91:166,94:$Vr,95:$Vs},{9:[1,168]},{9:[1,169]},o($V21,[2,109]),o($V21,[2,110]),o($V11,[2,95]),o($V11,[2,96]),o($V11,[2,97]),o($V11,[2,98]),o($V11,[2,99]),o($V11,[2,100]),o($V11,[2,101]),o($V11,[2,102]),{12:[1,170],27:$V81},o($V31,[2,25]),o($V41,[2,46]),o($V31,[2,26]),{8:55,9:$Vh,10:$Vi,15:71,30:$Vf,31:[1,171],35:$Vt,40:70,43:$Vj,44:114,45:56,46:57,47:58,48:59,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs,96:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA},o($V51,[2,29]),o($V51,[2,30]),{35:[1,172]},{35:[2,35],38:[1,173]},o($V71,[2,53]),{9:$Vh,10:$Vi,15:71,40:174,43:$Vj,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,15:71,40:70,43:$Vj,49:175,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,15:71,40:70,43:$Vj,49:176,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{98:[1,177]},{9:$Vh,10:$Vi,15:71,35:$Vt,40:70,43:$Vj,45:178,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},o($V61,[2,123]),o($V61,[2,124]),o($V61,[2,125]),{27:$V81,35:[1,179]},{9:$Vh,10:$Vi,15:71,40:180,43:$Vj,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},o($Vc1,[2,58]),o($Vc1,[2,59]),o($Vc1,[2,60]),o($Vc1,[2,61]),o($Vc1,[2,62]),o($Vc1,[2,63]),o($Vc1,[2,64]),o($Vc1,[2,65]),o($Vc1,[2,66]),o($Vc1,[2,67]),o($Vc1,[2,68]),o($VB,[2,21]),o($Vb1,[2,41],{10:$Vd,13:$Ve}),{9:[2,44]},o($VF,[2,70],{66:$VG,67:$VH,68:$VI}),o($VF,[2,71],{66:$VG,67:$VH,68:$VI}),o($VJ,[2,73],{70:$VK,71:$VL}),o($VJ,[2,74],{70:$VK,71:$VL}),o($VJ,[2,75],{70:$VK,71:$VL}),o($VM,[2,77],{73:$VN,74:$VO,75:$VP,76:$VQ}),o($VM,[2,78],{73:$VN,74:$VO,75:$VP,76:$VQ}),o($VR,[2,80],{78:$VS,79:$VT}),o($VR,[2,81],{78:$VS,79:$VT}),o($VR,[2,82],{78:$VS,79:$VT}),o($VR,[2,83],{78:$VS,79:$VT}),o($VU,[2,85],{81:$VV,82:$VW}),o($VU,[2,86],{81:$VV,82:$VW}),o($VX,[2,88],{43:$VY,83:$VZ,84:$V_}),o($VX,[2,89],{43:$VY,83:$VZ,84:$V_}),o($V$,[2,91]),o($V$,[2,92]),o($V$,[2,93]),{14:[1,181],27:$V81},o($V21,[2,105]),{12:[1,182],27:[1,183]},o($VB,[2,111]),o($V21,[2,107]),o($V21,[2,108]),o($V21,[2,116]),o($V31,[2,27]),o($V51,[2,31]),{9:$Vh,10:$Vi,15:71,30:$Vd1,39:184,40:185,43:$Vj,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},o($V91,[2,55]),{12:[1,187],27:$V81},{12:[1,188],27:$V81},{10:[1,189]},{9:$Vh,10:$Vi,15:71,35:$Vt,40:70,43:$Vj,45:190,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},o($V61,[2,126]),o($Va1,[2,57]),o($V21,[2,104]),o($V21,[2,106]),{9:$Vh,10:$Vi,15:71,40:191,43:$Vj,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{35:[2,36]},o($Ve1,[2,37]),{9:$Vh,10:$Vi,15:71,30:$Vd1,39:193,40:185,41:192,43:$Vj,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{8:55,9:$Vh,10:$Vi,15:71,30:$Vf,35:$Vt,40:70,43:$Vj,44:194,45:56,46:57,47:58,48:59,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs,96:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA},{8:55,9:$Vh,10:$Vi,15:71,30:$Vf,35:$Vt,40:70,43:$Vj,44:195,45:56,46:57,47:58,48:59,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs,96:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA},{9:$Vh,10:$Vi,15:71,40:70,43:$Vj,49:196,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{9:$Vh,10:$Vi,12:[1,197],15:71,40:70,43:$Vj,49:198,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},o($VB,[2,112]),{27:[1,200],31:[1,199]},o($Vf1,[2,39]),o($V41,[2,117],{97:[1,201]}),o($V61,[2,119]),{12:[1,202],27:$V81},{8:55,9:$Vh,10:$Vi,15:71,30:$Vf,35:$Vt,40:70,43:$Vj,44:203,45:56,46:57,47:58,48:59,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs,96:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA},{12:[1,204],27:$V81},o($Ve1,[2,38]),{9:$Vh,10:$Vi,15:71,30:$Vd1,39:205,40:185,43:$Vj,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs},{8:55,9:$Vh,10:$Vi,15:71,30:$Vf,35:$Vt,40:70,43:$Vj,44:206,45:56,46:57,47:58,48:59,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs,96:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA},{35:[1,207]},o($V61,[2,121]),{8:55,9:$Vh,10:$Vi,15:71,30:$Vf,35:$Vt,40:70,43:$Vj,44:208,45:56,46:57,47:58,48:59,49:62,50:72,62:29,65:30,67:$Vk,69:31,72:32,77:33,80:34,81:$Vl,82:$Vm,85:36,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:45,94:$Vr,95:$Vs,96:$Vu,98:$Vv,99:$Vw,100:$Vx,101:$Vy,102:$Vz,103:$VA},o($Vf1,[2,40]),o($V61,[2,118]),o($V61,[2,120]),o($V61,[2,122])],
defaultActions: {145:[2,44],184:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"easy_keyword_rules":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* consume //-comment */ 
break;
case 1: /* consume #-header */ 
break;
case 2: return 'AUTO'; 
break;
case 3: return 102; 
break;
case 4: return 'CASE'; 
break;
case 5: return 17; 
break;
case 6: return 'CONST'; 
break;
case 7: return 101; 
break;
case 8: return 'DEFAULT'; 
break;
case 9: return 99; 
break;
case 10: return 22; 
break;
case 11: return 97; 
break;
case 12: return 'ENUM'; 
break;
case 13: return 'EXTERN'; 
break;
case 14: return 21; 
break;
case 15: return 100; 
break;
case 16: return 'GOTO'; 
break;
case 17: return 96; 
break;
case 18: return 'INLINE'; 
break;
case 19: return 19; 
break;
case 20: return 20; 
break;
case 21: return 'REGISTER'; 
break;
case 22: return 'RESTRICT'; 
break;
case 23: return 103; 
break;
case 24: return 18; 
break;
case 25: return 23; 
break;
case 26: return 'SIZEOF'; 
break;
case 27: return 'STATIC'; 
break;
case 28: return 'STRUCT'; 
break;
case 29: return 'SWITCH'; 
break;
case 30: return 'TYPEDEF'; 
break;
case 31: return 'UNION'; 
break;
case 32: return 24; 
break;
case 33: return 16; 
break;
case 34: return 'VOLATILE'; 
break;
case 35: return 98; 
break;
case 36: return 'ALIGNAS'; 
break;
case 37: return 'ALIGNOF'; 
break;
case 38: return 'ATOMIC'; 
break;
case 39: return 'BOOL'; 
break;
case 40: return 'COMPLEX'; 
break;
case 41: return 'GENERIC'; 
break;
case 42: return 'IMAGINARY'; 
break;
case 43: return 'NORETURN'; 
break;
case 44: return 'STATIC_ASSERT'; 
break;
case 45: return 'THREAD_LOCAL'; 
break;
case 46: return 'FUNC_NAME'; 
break;
case 47: return 9; 
break;
case 48: return 94; 
break;
case 49: return 94; 
break;
case 50: return 94; 
break;
case 51: return 94; 
break;
case 52: return 94; 
break;
case 53: return 94; 
break;
case 54: return 94; 
break;
case 55: return 94; 
break;
case 56: return 94; 
break;
case 57: return 94; 
break;
case 58: return 95; 
break;
case 59: return 'ELLIPSIS'; 
break;
case 60: return 58; 
break;
case 61: return 57; 
break;
case 62: return 55; 
break;
case 63: return 56; 
break;
case 64: return 52; 
break;
case 65: return 53; 
break;
case 66: return 54; 
break;
case 67: return 59; 
break;
case 68: return 60; 
break;
case 69: return 61; 
break;
case 70: return 79; 
break;
case 71: return 78; 
break;
case 72: return 86; 
break;
case 73: return 87; 
break;
case 74: return 93; 
break;
case 75: return 63; 
break;
case 76: return 64; 
break;
case 77: return 75; 
break;
case 78: return 76; 
break;
case 79: return 70; 
break;
case 80: return 71; 
break;
case 81: return 35; 
break;
case 82: return 30; 
break;
case 83: return 31; 
break;
case 84: return 27; 
break;
case 85: return ':'; 
break;
case 86: return 38; 
break;
case 87: return 10; 
break;
case 88: return 12; 
break;
case 89: return 13; 
break;
case 90: return 14; 
break;
case 91: return 92; 
break;
case 92: return 67; 
break;
case 93: return 89; 
break;
case 94: return 88; 
break;
case 95: return 82; 
break;
case 96: return 81; 
break;
case 97: return 43; 
break;
case 98: return 83; 
break;
case 99: return 84; 
break;
case 100: return 73; 
break;
case 101: return 74; 
break;
case 102: return 68; 
break;
case 103: return 66; 
break;
case 104: return '?'; 
break;
case 105: /* whitespace separates tokens */ 
break;
case 106: /* discard bad characters */ 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:#.*)/,/^(?:auto\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:const\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:enum\b)/,/^(?:extern\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:inline\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:register\b)/,/^(?:restrict\b)/,/^(?:return\b)/,/^(?:short\b)/,/^(?:signed\b)/,/^(?:sizeof\b)/,/^(?:static\b)/,/^(?:struct\b)/,/^(?:switch\b)/,/^(?:typedef\b)/,/^(?:union\b)/,/^(?:unsigned\b)/,/^(?:void\b)/,/^(?:volatile\b)/,/^(?:while\b)/,/^(?:_Alignas\b)/,/^(?:_Alignof\b)/,/^(?:_Atomic\b)/,/^(?:_Bool\b)/,/^(?:_Complex\b)/,/^(?:_Generic\b)/,/^(?:_Imaginary\b)/,/^(?:_Noreturn\b)/,/^(?:_Static_assert\b)/,/^(?:_Thread_local\b)/,/^(?:__func__\b)/,/^(?:([a-zA-Z_])([a-zA-Z_0-9])*)/,/^(?:(([xX]))([a-fA-F0-9])+((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)/,/^(?:([1-9])([0-9])*((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)/,/^(?:0([0-7])*((((u|U)(l|L|ll|LL)?)|((l|L|ll|LL)(u|U)?)))?)/,/^(?:((u|U|L))?'([^'\\\n]|((\\([\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))+')/,/^(?:([0-9])+(([Ee][+-]?([0-9])+))((f|F|l|L))?)/,/^(?:([0-9])*\.([0-9])+(([Ee][+-]?([0-9])+))?((f|F|l|L))?)/,/^(?:([0-9])+\.(([Ee][+-]?([0-9])+))?((f|F|l|L))?)/,/^(?:(([xX]))([a-fA-F0-9])+(([Pp][+-]?([0-9])+))((f|F|l|L))?)/,/^(?:(([xX]))([a-fA-F0-9])*\.([a-fA-F0-9])+(([Pp][+-]?([0-9])+))((f|F|l|L))?)/,/^(?:(([xX]))([a-fA-F0-9])+\.(([Pp][+-]?([0-9])+))((f|F|l|L))?)/,/^(?:(((u8|u|U|L))?"([^\"\\\n]|((\\([\?\\abfnrtv]|[0-7]{1,3}|x[a-fA-F0-9]+))))*"([" "\t\v\n\f\r])*)+)/,/^(?:\.\.\.)/,/^(?:>>=)/,/^(?:<<=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:&=)/,/^(?:\^=)/,/^(?:\|=)/,/^(?:>>)/,/^(?:<<)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:;)/,/^(?:(\{|<%))/,/^(?:(\}|%>))/,/^(?:,)/,/^(?::)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:(\[|<:))/,/^(?:(\]|:>))/,/^(?:\.)/,/^(?:&)/,/^(?:!)/,/^(?:~)/,/^(?:-)/,/^(?:\+)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<)/,/^(?:>)/,/^(?:\^)/,/^(?:\|)/,/^(?:\?)/,/^(?:([" "\t\v\n\f\r])+)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = my_c_parser;
exports.Parser = my_c_parser.Parser;
exports.parse = function () { return my_c_parser.parse.apply(my_c_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}